const axios = require('axios');
const fs = require('fs');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

async function authenticate() {
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  return authToken;
}

async function verifyMigration() {
  console.log('üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò\n');
  console.log('='.repeat(60) + '\n');
  
  try {
    await authenticate();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    const report = JSON.parse(fs.readFileSync('migration-report.json', 'utf8'));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—É—Ç–µ—Ä—ã –∏–∑ Directus
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—É—Ç–µ—Ä–æ–≤ –∏–∑ Directus...');
    const response = await axios.get(
      `${DIRECTUS_URL}/items/scooters?limit=-1`,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    
    const scooters = response.data.data;
    console.log(`‚úì –ü–æ–ª—É—á–µ–Ω–æ —Å–∫—É—Ç–µ—Ä–æ–≤: ${scooters.length}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π');
    console.log(`  –û–∂–∏–¥–∞–ª–æ—Å—å: ${report.import.success}`);
    console.log(`  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${scooters.length}`);
    const countMatch = scooters.length === report.import.success;
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${countMatch ? '‚úì –°–û–í–ü–ê–î–ê–ï–¢' : '‚úó –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—ã–±–æ—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê 2: –í—ã–±–æ—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n');
    
    const samplesToCheck = Math.min(5, scooters.length);
    for (let i = 0; i < samplesToCheck; i++) {
      const scooter = scooters[i];
      console.log(`–°–∫—É—Ç–µ—Ä ${i + 1}/${samplesToCheck}:`);
      console.log(`  ID: ${scooter.id}`);
      console.log(`  –ù–æ–º–µ—Ä: ${scooter.scooter_number_old || 'N/A'}`);
      console.log(`  –ú–æ–¥–µ–ª—å: ${scooter.model || 'N/A'}`);
      console.log(`  –ì–æ–¥: ${scooter.year || 'N/A'}`);
      console.log(`  –¶–≤–µ—Ç: ${scooter.color || 'N/A'}`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${scooter.status || 'N/A'}`);
      console.log(`  –¶–µ–Ω–∞ (1 –≥–æ–¥): ${scooter.price_1_year_rent || 'N/A'}`);
      console.log('');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê 3: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n');
    
    let missingFields = 0;
    scooters.forEach((scooter, index) => {
      const errors = [];
      if (!scooter.scooter_number_old) errors.push('–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞');
      if (!scooter.model) errors.push('–º–æ–¥–µ–ª—å');
      if (!scooter.year) errors.push('–≥–æ–¥');
      
      if (errors.length > 0) {
        console.log(`  –°–∫—É—Ç–µ—Ä ID ${scooter.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${errors.join(', ')}`);
        missingFields++;
      }
    });
    
    if (missingFields === 0) {
      console.log('  ‚úì –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n');
    } else {
      console.log(`  ‚úó –ù–∞–π–¥–µ–Ω–æ ${missingFields} –∑–∞–ø–∏—Å–µ–π —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏\n`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê 4: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ —Å–∫—É—Ç–µ—Ä–æ–≤\n');
    
    const numbers = scooters.map(s => s.scooter_number_old).filter(n => n);
    const uniqueNumbers = new Set(numbers);
    const duplicates = numbers.length - uniqueNumbers.size;
    
    console.log(`  –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: ${numbers.length}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueNumbers.size}`);
    console.log(`  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates}`);
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${duplicates === 0 ? '‚úì –ù–ï–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í' : '‚úó –ï–°–¢–¨ –î–£–ë–õ–ò–ö–ê–¢–´'}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π\n');
    
    const fieldStats = {
      power: 0,
      model: 0,
      year: 0,
      color: 0,
      client_name: 0,
      client_phone: 0,
      oil_change_date: 0,
      insurance_date: 0,
      main_photo: 0,
      price_1_year_rent: 0,
      price_6_month_high_season: 0,
      price_6_month_low_season: 0
    };
    
    scooters.forEach(scooter => {
      Object.keys(fieldStats).forEach(field => {
        if (scooter[field]) fieldStats[field]++;
      });
    });
    
    Object.entries(fieldStats).forEach(([field, count]) => {
      const percentage = ((count / scooters.length) * 100).toFixed(1);
      console.log(`  ${field}: ${count}/${scooters.length} (${percentage}%)`);
    });
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò');
    console.log('='.repeat(60) + '\n');
    
    const allChecks = [
      { name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', passed: countMatch },
      { name: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', passed: missingFields === 0 },
      { name: '–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤', passed: duplicates === 0 }
    ];
    
    const passedChecks = allChecks.filter(c => c.passed).length;
    const totalChecks = allChecks.length;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: ${passedChecks}/${totalChecks}\n`);
    
    allChecks.forEach(check => {
      console.log(`  ${check.passed ? '‚úì' : '‚úó'} ${check.name}`);
    });
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    if (passedChecks === totalChecks) {
      console.log('‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n');
    } else {
      console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´\n');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationReport = {
      timestamp: new Date().toISOString(),
      totalScooters: scooters.length,
      expectedScooters: report.import.success,
      checks: allChecks,
      fieldStats,
      samples: scooters.slice(0, 5).map(s => ({
        id: s.id,
        scooter_number_old: s.scooter_number_old,
        model: s.model,
        year: s.year,
        color: s.color,
        status: s.status
      }))
    };
    
    fs.writeFileSync('verification-report.json', JSON.stringify(verificationReport, null, 2), 'utf8');
    console.log('üìÑ –û—Ç—á–µ—Ç –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ verification-report.json\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }
}

verifyMigration();

