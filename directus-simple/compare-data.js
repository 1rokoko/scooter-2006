const axios = require('axios');
const fs = require('fs');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

async function authenticate() {
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  return authToken;
}

async function compareData() {
  console.log('\n' + '='.repeat(70));
  console.log('üîç –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•: Google Sheets vs Directus');
  console.log('='.repeat(70) + '\n');
  
  try {
    await authenticate();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const sourceData = JSON.parse(fs.readFileSync('scooters-data.json', 'utf8'));
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Directus
    const response = await axios.get(
      `${DIRECTUS_URL}/items/scooters?limit=-1`,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    
    const directusScooters = response.data.data;
    
    console.log(`üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`);
    console.log(`  Google Sheets: ${sourceData.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`  Directus: ${directusScooters.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`  –†–∞–∑–Ω–∏—Ü–∞: ${sourceData.length - directusScooters.length}\n`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    console.log('üìã –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –°–ö–£–¢–ï–†–ê–ú:\n');
    
    const comparison = [];
    
    for (let i = 0; i < Math.min(10, directusScooters.length); i++) {
      const directusScooter = directusScooters[i];
      const sourceScooter = sourceData[i];
      
      console.log(`–°–∫—É—Ç–µ—Ä ${i + 1}:`);
      console.log(`  Directus ID: ${directusScooter.id}`);
      console.log(`  –ù–æ–º–µ—Ä (Directus): ${directusScooter.scooter_number_old || 'N/A'}`);
      console.log(`  –ù–æ–º–µ—Ä (Google): ${sourceScooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || sourceScooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '] || 'N/A'}`);
      console.log(`  –ú–æ–¥–µ–ª—å (Directus): ${directusScooter.model || 'N/A'}`);
      console.log(`  –ú–æ–¥–µ–ª—å (Google): ${sourceScooter['Model'] || 'N/A'}`);
      console.log(`  –ì–æ–¥ (Directus): ${directusScooter.year || 'N/A'}`);
      console.log(`  –ì–æ–¥ (Google): ${sourceScooter['Year'] || 'N/A'}`);
      console.log(`  –¶–≤–µ—Ç (Directus): ${directusScooter.color || 'N/A'}`);
      console.log(`  –¶–≤–µ—Ç (Google): ${sourceScooter['—Ü–≤–µ—Ç'] || 'N/A'}`);
      console.log('');
      
      comparison.push({
        index: i,
        directus: {
          id: directusScooter.id,
          number: directusScooter.scooter_number_old,
          model: directusScooter.model,
          year: directusScooter.year,
          color: directusScooter.color
        },
        google: {
          number: sourceScooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || sourceScooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '],
          model: sourceScooter['Model'],
          year: sourceScooter['Year'],
          color: sourceScooter['—Ü–≤–µ—Ç']
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –ò–ú–ü–û–†–¢–ê:\n');
    
    const googleNumbers = sourceData
      .map(s => s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '])
      .filter(n => n && n.trim());
    
    const directusNumbers = directusScooters
      .map(s => s.scooter_number_old)
      .filter(n => n);
    
    console.log(`  –ù–æ–º–µ—Ä–æ–≤ –≤ Google Sheets: ${googleNumbers.length}`);
    console.log(`  –ù–æ–º–µ—Ä–æ–≤ –≤ Directus: ${directusNumbers.length}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    const missingInDirectus = googleNumbers.filter(gn => 
      !directusNumbers.some(dn => dn.includes(gn) || gn.includes(dn))
    );
    
    if (missingInDirectus.length > 0) {
      console.log(`  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Directus (${missingInDirectus.length}):`);
      missingInDirectus.forEach(num => console.log(`    - ${num}`));
    } else {
      console.log(`  ‚úì –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ Google Sheets –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Directus`);
    }
    
    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('='.repeat(70) + '\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        googleSheets: sourceData.length,
        directus: directusScooters.length,
        difference: sourceData.length - directusScooters.length
      },
      comparison: comparison,
      missingInDirectus: missingInDirectus
    };
    
    fs.writeFileSync('comparison-report.json', JSON.stringify(report, null, 2), 'utf8');
    console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ comparison-report.json\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }
}

compareData();

