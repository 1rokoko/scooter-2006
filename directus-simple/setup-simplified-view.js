const axios = require('axios');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

async function authenticate() {
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  console.log('‚úì Authenticated\n');
  return authToken;
}

async function setupSimplifiedView() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ view –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...\n');
  await authenticate();
  
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ preset –¥–ª—è Scooters...\n');
  
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ presets
  try {
    const presetsResponse = await axios.get(
      `${DIRECTUS_URL}/presets?filter[collection][_eq]=scooters`,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    
    for (const preset of presetsResponse.data.data) {
      await axios.delete(
        `${DIRECTUS_URL}/presets/${preset.id}`,
        {
          headers: { Authorization: `Bearer ${authToken}` }
        }
      );
    }
    console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ presets');
  } catch (error) {
    console.log('  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ presets:', error.response?.data?.errors?.[0]?.message);
  }
  
  // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π preset - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
  const simplifiedFields = [
    'id',
    'scooter_number_old',
    'current_status',
    'model',
    'year',
    'current_owner_name',
    'current_owner_telegram',
    'current_owner_phone',
    'rental_start',
    'rental_end'
  ];
  
  const widths = {};
  simplifiedFields.forEach(field => {
    if (field === 'scooter_number_old') {
      widths[field] = 150;
    } else if (field === 'current_status') {
      widths[field] = 120;
    } else if (field === 'model') {
      widths[field] = 150;
    } else if (field === 'current_owner_name') {
      widths[field] = 180;
    } else if (field === 'current_owner_telegram' || field === 'current_owner_phone') {
      widths[field] = 150;
    } else {
      widths[field] = 120;
    }
  });
  
  try {
    await axios.post(
      `${DIRECTUS_URL}/presets`,
      {
        collection: 'scooters',
        layout: 'tabular',
        layout_query: {
          tabular: {
            fields: simplifiedFields,
            spacing: 'comfortable',
            widths: widths
          }
        },
        layout_options: {
          tabular: {
            fields: simplifiedFields,
            spacing: 'comfortable',
            widths: widths
          }
        }
      },
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    console.log('  ‚úì –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π preset –¥–ª—è Scooters');
    console.log(`  ‚úì –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ${simplifiedFields.length} –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π`);
  } catch (error) {
    console.error('  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ preset:', error.response?.data?.errors?.[0]?.message);
  }
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º collection metadata –¥–ª—è drawer mode
  try {
    await axios.patch(
      `${DIRECTUS_URL}/collections/scooters`,
      {
        meta: {
          display_template: '{{scooter_number_old}} - {{model}}',
          sort_field: 'scooter_number_old',
          archive_field: 'status',
          archive_value: 'archived',
          unarchive_value: 'draft',
          item_duplication_fields: ['model', 'year', 'power', 'color'],
          note: '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π view: —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è. –û—Å—Ç–∞–ª—å–Ω–æ–µ - –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∫—É—Ç–µ—Ä.'
        }
      },
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    console.log('  ‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω drawer mode –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  } catch (error) {
    console.error('  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ collection:', error.response?.data?.errors?.[0]?.message);
  }
  
  console.log('\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Clients...\n');
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π preset –¥–ª—è Clients
  const clientFields = [
    'id',
    'first_name',
    'last_name',
    'phone_primary',
    'telegram_id',
    'telegram_username',
    'email',
    'status'
  ];
  
  try {
    const clientPresetsResponse = await axios.get(
      `${DIRECTUS_URL}/presets?filter[collection][_eq]=clients`,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    
    for (const preset of clientPresetsResponse.data.data) {
      await axios.delete(
        `${DIRECTUS_URL}/presets/${preset.id}`,
        {
          headers: { Authorization: `Bearer ${authToken}` }
        }
      );
    }
    
    await axios.post(
      `${DIRECTUS_URL}/presets`,
      {
        collection: 'clients',
        layout: 'tabular',
        layout_query: {
          tabular: {
            fields: clientFields,
            spacing: 'comfortable'
          }
        },
        layout_options: {
          tabular: {
            fields: clientFields,
            spacing: 'comfortable'
          }
        }
      },
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    console.log('  ‚úì –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π preset –¥–ª—è Clients');
    console.log(`  ‚úì –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ${clientFields.length} –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π`);
  } catch (error) {
    console.error('  ‚úó –û—à–∏–±–∫–∞:', error.response?.data?.errors?.[0]?.message);
  }
  
  console.log('\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π view –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.log('\nüìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
  console.log('   Scooters:');
  console.log('   ‚úì –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 10 –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π');
  console.log('   ‚úì –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∫—É—Ç–µ—Ä');
  console.log('   ‚úì –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ drawer');
  console.log('   Clients:');
  console.log('   ‚úì –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 8 –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π');
  console.log('   ‚úì Telegram ID –∏ username –≤–∏–¥–Ω—ã —Å—Ä–∞–∑—É');
  console.log('\nüí° –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)');
  console.log('üåê http://localhost:8055/admin/content/scooters');
}

setupSimplifiedView().catch(console.error);

