 const axios = require('axios');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

async function authenticate() {
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  console.log('‚úì Authenticated');
  return authToken;
}

async function createCollection(collectionData) {
  try {
    await axios.post(`${DIRECTUS_URL}/collections`, collectionData, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log(`‚úì Collection "${collectionData.collection}" created`);
  } catch (error) {
    if (error.response?.data?.errors?.[0]?.message?.includes('already exists')) {
      console.log(`‚ö† Collection "${collectionData.collection}" exists`);
    } else {
      console.error(`‚úó Error: ${error.response?.data?.errors?.[0]?.message || error.message}`);
    }
  }
}

async function createField(collection, fieldData) {
  try {
    await axios.post(`${DIRECTUS_URL}/fields/${collection}`, fieldData, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log(`  ‚úì ${fieldData.field}`);
  } catch (error) {
    if (error.response?.data?.errors?.[0]?.message?.includes('already exists')) {
      console.log(`  ‚ö† ${fieldData.field} exists`);
    } else {
      console.error(`  ‚úó ${fieldData.field}: ${error.response?.data?.errors?.[0]?.message || error.message}`);
    }
  }
}

async function setupSchema() {
  console.log('üöÄ Starting schema setup...\n');
  await authenticate();
  
  // ========== COLLECTIONS ==========
  console.log('\nüì¶ Creating Collections...');
  
  await createCollection({
    collection: 'clients',
    meta: {
      icon: 'people_alt',
      note: '–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      display_template: '{{first_name}} {{last_name}}',
      archive_field: 'status',
      archive_value: 'archived',
      sort_field: 'last_name'
    },
    schema: {}
  });
  
  await createCollection({
    collection: 'scooters',
    meta: {
      icon: 'two_wheeler',
      note: '–°–∫—É—Ç–µ—Ä—ã –∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ã',
      display_template: '{{model}} {{year}} ({{scooter_number_old}})',
      archive_field: 'status',
      archive_value: 'retired',
      sort_field: 'scooter_number_old'
    },
    schema: {}
  });
  
  await createCollection({
    collection: 'communications',
    meta: {
      icon: 'chat',
      note: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      display_template: '{{communication_type}} - {{subject}}',
      sort_field: 'communication_date'
    },
    schema: {}
  });
  
  await createCollection({
    collection: 'rentals',
    meta: {
      icon: 'receipt_long',
      note: '–ê—Ä–µ–Ω–¥—ã',
      display_template: '#{{rental_number}} - {{client_name}}',
      archive_field: 'status',
      archive_value: 'completed',
      sort_field: 'start_date'
    },
    schema: {}
  });
  
  await createCollection({
    collection: 'maintenance_records',
    meta: {
      icon: 'build',
      note: '–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
      display_template: '{{maintenance_type}} ({{maintenance_date}})',
      sort_field: 'maintenance_date'
    },
    schema: {}
  });
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // ========== CLIENTS FIELDS ==========
  console.log('\nüë§ Creating Clients fields...');
  
  await createField('clients', {
    field: 'status',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      options: {
        choices: [
          { text: '–ê–∫—Ç–∏–≤–Ω—ã–π', value: 'active' },
          { text: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π', value: 'inactive' },
          { text: '–ê—Ä—Ö–∏–≤', value: 'archived' }
        ]
      },
      display: 'labels',
      display_options: {
        choices: [
          { text: '–ê–∫—Ç–∏–≤–Ω—ã–π', value: 'active', foreground: '#FFF', background: '#00C897' },
          { text: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π', value: 'inactive', foreground: '#FFF', background: '#A2B5CD' },
          { text: '–ê—Ä—Ö–∏–≤', value: 'archived', foreground: '#FFF', background: '#E35169' }
        ]
      },
      required: true,
      width: 'half'
    },
    schema: { default_value: 'active' }
  });
  
  await createField('clients', {
    field: 'first_name',
    type: 'string',
    meta: { interface: 'input', required: true, width: 'half', note: '–ò–º—è' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'last_name',
    type: 'string',
    meta: { interface: 'input', required: true, width: 'half', note: '–§–∞–º–∏–ª–∏—è' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'email',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: 'Email' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'phone_primary',
    type: 'string',
    meta: { interface: 'input', required: true, width: 'half', note: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'phone_secondary',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'date_of_birth',
    type: 'date',
    meta: { interface: 'datetime', width: 'half', note: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'address_street',
    type: 'string',
    meta: { interface: 'input', width: 'full', note: '–ê–¥—Ä–µ—Å' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'address_city',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–ì–æ—Ä–æ–¥' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'address_postal_code',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–ò–Ω–¥–µ–∫—Å' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'drivers_license_number',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–ù–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'drivers_license_expiry',
    type: 'date',
    meta: { interface: 'datetime', width: 'half', note: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∞–≤' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'emergency_contact_name',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'emergency_contact_phone',
    type: 'string',
    meta: { interface: 'input', width: 'half', note: '–¢–µ–ª–µ—Ñ–æ–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞' },
    schema: {}
  });
  
  await createField('clients', {
    field: 'notes',
    type: 'text',
    meta: { interface: 'input-rich-text-md', width: 'full', note: '–ó–∞–º–µ—Ç–∫–∏' },
    schema: {}
  });
  
  console.log('\n‚úÖ Clients fields created!');
  console.log('\nüõµ Creating Scooters fields (this will take a while)...');

  // Load scooter fields
  const scooterFields = require('./scooter-fields.js');
  const scooterPricingFields = require('./scooter-pricing-fields.js');

  // Create field groups first
  await createField('scooters', {
    field: 'basic_info',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'info'
      },
      note: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    }
  });

  await createField('scooters', {
    field: 'current_rental',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'event'
      },
      note: '–¢–µ–∫—É—â–∞—è –∞—Ä–µ–Ω–¥–∞'
    }
  });

  await createField('scooters', {
    field: 'maintenance_engine',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'settings'
      },
      note: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ - –î–≤–∏–≥–∞—Ç–µ–ª—å'
    }
  });

  await createField('scooters', {
    field: 'maintenance_brakes',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'build'
      },
      note: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ - –¢–æ—Ä–º–æ–∑–∞'
    }
  });

  await createField('scooters', {
    field: 'documents',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'description'
      },
      note: '–î–æ–∫—É–º–µ–Ω—Ç—ã'
    }
  });

  await createField('scooters', {
    field: 'components',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'inventory'
      },
      note: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'
    }
  });

  await createField('scooters', {
    field: 'photos',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'photo_library'
      },
      note: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
    }
  });

  await createField('scooters', {
    field: 'pricing_basic',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'attach_money'
      },
      note: '–¶–µ–Ω—ã - –ë–∞–∑–æ–≤—ã–µ'
    }
  });

  await createField('scooters', {
    field: 'pricing_daily',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'today'
      },
      note: '–¶–µ–Ω—ã - –ü–æ –¥–Ω—è–º'
    }
  });

  await createField('scooters', {
    field: 'pricing_monthly',
    type: 'alias',
    meta: {
      interface: 'group-detail',
      special: ['group'],
      options: {
        headerIcon: 'calendar_month'
      },
      note: '–¶–µ–Ω—ã - –ü–æ –º–µ—Å—è—Ü–∞–º'
    }
  });

  // Create all scooter fields
  for (const field of scooterFields) {
    await createField('scooters', field);
  }

  // Create all pricing fields
  for (const field of scooterPricingFields) {
    await createField('scooters', field);
  }

  console.log('\n‚úÖ Scooters fields created!');
  console.log('\nüí¨ Creating Communications fields...');

  // Communications fields
  await createField('communications', {
    field: 'client',
    type: 'uuid',
    meta: {
      interface: 'select-dropdown-m2o',
      required: true,
      width: 'half',
      note: '–ö–ª–∏–µ–Ω—Ç',
      display: 'related-values',
      display_options: {
        template: '{{first_name}} {{last_name}}'
      }
    },
    schema: {}
  });

  await createField('communications', {
    field: 'communication_type',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      options: {
        choices: [
          { text: '–¢–µ–ª–µ—Ñ–æ–Ω', value: 'phone_call' },
          { text: 'Email', value: 'email' },
          { text: 'SMS', value: 'sms' },
          { text: '–õ–∏—á–Ω–æ', value: 'in_person' },
          { text: 'WhatsApp', value: 'whatsapp' },
          { text: '–î—Ä—É–≥–æ–µ', value: 'other' }
        ]
      },
      required: true,
      width: 'half',
      note: '–¢–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'
    },
    schema: {}
  });

  await createField('communications', {
    field: 'direction',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      options: {
        choices: [
          { text: '–í—Ö–æ–¥—è—â–∏–π', value: 'inbound' },
          { text: '–ò—Å—Ö–æ–¥—è—â–∏–π', value: 'outbound' }
        ]
      },
      required: true,
      width: 'half',
      note: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
    },
    schema: {}
  });

  await createField('communications', {
    field: 'subject',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: '–¢–µ–º–∞'
    },
    schema: {}
  });

  await createField('communications', {
    field: 'content',
    type: 'text',
    meta: {
      interface: 'input-rich-text-md',
      required: true,
      width: 'full',
      note: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'
    },
    schema: {}
  });

  await createField('communications', {
    field: 'communication_date',
    type: 'timestamp',
    meta: {
      interface: 'datetime',
      required: true,
      width: 'half',
      note: '–î–∞—Ç–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'
    },
    schema: {}
  });

  await createField('communications', {
    field: 'follow_up_required',
    type: 'boolean',
    meta: {
      interface: 'boolean',
      width: 'half',
      note: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç'
    },
    schema: { default_value: false }
  });

  await createField('communications', {
    field: 'follow_up_date',
    type: 'date',
    meta: {
      interface: 'datetime',
      width: 'half',
      note: '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞'
    },
    schema: {}
  });

  console.log('\n‚úÖ All collections and fields created successfully!');
  console.log('\nüéâ Schema setup complete!');
  console.log('\nüìä Summary:');
  console.log('  - Clients collection with 14 fields');
  console.log('  - Scooters collection with 60+ fields');
  console.log('  - Communications collection with 8 fields');
  console.log('  - Rentals collection (ready for fields)');
  console.log('  - Maintenance_records collection (ready for fields)');
  console.log('\nüåê Access Directus at: http://localhost:8055');
  console.log('üìß Email: seocos@gmail.com');
  console.log('üîë Password: directus2024!');
}

setupSchema().catch(console.error);

