const axios = require('axios');
const fs = require('fs');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

// –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ Google Sheets –≤ Directus
const FIELD_MAPPING = {
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  'Power': 'power',
  'Model': 'model',
  'Year': 'year',
  '—Ü–≤–µ—Ç': 'color',
  '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)': 'scooter_number_old',
  '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  ': 'scooter_number_old', // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  '–Ω–∞–∫–ª–µ–π–∫–∞': 'sticker',
  '–Ω–∞–∫–ª–µ–π–∫–∞ –æ –∞—Ä–µ–Ω–¥–µ': 'rental_sticker',
  
  // –¢–µ–∫—É—â–∞—è –∞—Ä–µ–Ω–¥–∞
  '–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞': 'client_name',
  '–Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞': 'client_phone',
  '–Ω–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã': 'rental_start',
  '–∫–æ–Ω–µ—Ü –∞—Ä–µ–Ω–¥—ã': 'rental_end',
  
  // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è
  '–¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã': 'oil_change_date',
  '–º–∞—Å–ª–æ –¥–≤–∏–∂  –∫–º ': 'oil_change_km',
  'gear oil ': 'gear_oil_km',
  '–≤–æ–¥–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä': 'radiator_water_date',
  '–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ä—Ç  –∫–º ': 'air_filter_km',
  '—Å–≤–µ—á–∏  –∫–º ': 'spark_plugs_km',
  
  // –¢–æ—Ä–º–æ–∑–∞
  '—Ç–æ—Ä–º–æ–∑–∞ –ø–µ—Ä–µ–¥–Ω–∏–µ –∫–º ': 'front_brakes_km',
  '—Ç–æ—Ä–º–æ–∑–∞  –∑–∞–¥–Ω–∏–µ –∫–º ': 'rear_brakes_km',
  '–∑–∞–¥–Ω–∏–π –¥–∏—Å–∫ –Ω–∞–¥–æ –º–µ–Ω—è—Ç—å. —á—Ç–æ–± –∑–∞–¥–Ω–∏–π —Ç–æ—Ä–º–æ–∑ –Ω–µ —Å–∫—Ä–∏–ø–µ–ª. –Ω–æ –≤—Ä–æ–¥–µ –Ω–µ —Å–∫—Ä–∏–ø–∏—Ç ': 'rear_disc_note',
  
  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  '—Ç–µ—Ö —Ç–∞–ª–æ–Ω –¥–∞—Ç–∞': 'tech_passport_date',
  '—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞  –¥–∞—Ç–∞': 'insurance_date',
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  '–ø—Ä–∏–∫—É—Ä–∏–≤–∞—Ç–µ–ª—å': 'cigarette_lighter',
  '–ø–µ—Ä–µ–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫': 'front_bearing',
  '–∑–∞–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫': 'rear_bearing',
  '—Ä–µ–∑–∏–Ω–∞ –ø–µ—Ä–µ–¥–Ω—è—è': 'front_tire',
  '—Ä–µ–∑–∏–Ω–∞ –∑–∞–¥–Ω—è—è': 'rear_tire',
  '–±–∞—Ç–∞—Ä–µ—è': 'battery',
  '—Ä–µ–º–µ–Ω—å': 'belt',
  '—Å—Ç–∞—Ä—Ç–µ—Ä': 'starter',
  '–ø—Ä–æ–∫–ª–∞–¥–∫–∞ ': 'gasket',
  '–≤–æ–¥–∞ ': 'water',
  'sinotrack gps ': 'sinotrack_gps',
  
  // –§–æ—Ç–æ
  '–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ': 'main_photo',
  '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ': 'photo_link',
  
  // –¶–µ–Ω—ã
  'Price': 'price',
  '1 year rent': 'price_1_year_rent',
  '6 month hight season': 'price_6_month_high_season',
  '6 month low season': 'price_6_month_low_season',
  '1-3 days': 'price_1_3_days',
  '4-7 days': 'price_4_7_days',
  '7-14 days': 'price_7_14_days',
  '15-25 day': 'price_15_25_days',
  'December': 'price_december',
  'January': 'price_january',
  'February': 'price_february',
  'March ': 'price_march',
  'April': 'price_april',
  'May': 'price_may',
  'Summer ': 'price_summer',
  'September ': 'price_september',
  'October ': 'price_october',
  'November ': 'price_november'
};

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function authenticate() {
  console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Directus...');
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  console.log('‚úì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n');
  return authToken;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
function parseDate(dateStr) {
  if (!dateStr || dateStr.trim() === '') return null;

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  dateStr = dateStr.trim();

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è–≤–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ –±–µ–∑ —Ç–æ—á–µ–∫)
  if (/^\d+$/.test(dateStr) && dateStr.length < 4) {
    return null; // –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–µ –¥–∞—Ç–∞
  }

  // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
  const ddmmyyyyMatch = dateStr.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
  if (ddmmyyyyMatch) {
    const [, day, month, year] = ddmmyyyyMatch;
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  // –§–æ—Ä–º–∞—Ç DD.MM.YY
  const ddmmyyMatch = dateStr.match(/^(\d{1,2})\.(\d{1,2})\.(\d{2})$/);
  if (ddmmyyMatch) {
    const [, day, month, year] = ddmmyyMatch;
    const fullYear = parseInt(year) > 50 ? `19${year}` : `20${year}`;
    return `${fullYear}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞
function parseNumber(numStr) {
  if (!numStr || numStr.trim() === '') return null;
  const num = parseFloat(numStr.replace(',', '.'));
  return isNaN(num) ? null : num;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
function parseBoolean(boolStr) {
  if (!boolStr || boolStr.trim() === '') return false;
  const str = boolStr.toLowerCase().trim();
  return str === '–¥–∞' || str === 'yes' || str === 'true' || str === '1';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—É—Ç–µ—Ä–∞
function determineStatus(scooter) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã - —Å–∫—É—Ç–µ—Ä –≤ –∞—Ä–µ–Ω–¥–µ
  if (scooter.client_name && scooter.client_name.trim() && 
      scooter.rental_start && scooter.rental_start.trim()) {
    return '–í –∞—Ä–µ–Ω–¥–µ';
  }
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ—Å—Ç—É–ø–µ–Ω
  return '–î–æ—Å—Ç—É–ø–µ–Ω';
}

// –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ —Ñ–æ—Ä–º–∞—Ç Directus
function transformScooter(googleScooter) {
  const directusScooter = {};
  
  // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
  for (const [googleField, directusField] of Object.entries(FIELD_MAPPING)) {
    const value = googleScooter[googleField];

    if (value && value.trim()) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
      // –ü–æ–ª—è —Å –¥–∞—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è rental_start –∏ rental_end)
      if (directusField.includes('date') || directusField === 'rental_start' || directusField === 'rental_end') {
        const parsedDate = parseDate(value);
        if (parsedDate) {
          directusScooter[directusField] = parsedDate;
        }
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –ø–æ–ª–µ
      } else if (directusField.includes('km') || directusField.includes('price') || directusField === 'year') {
        const parsedNumber = parseNumber(value);
        if (parsedNumber !== null) {
          directusScooter[directusField] = parsedNumber;
        }
      } else if (directusField === 'cigarette_lighter') {
        directusScooter[directusField] = parseBoolean(value);
      } else {
        directusScooter[directusField] = value.trim();
      }
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  directusScooter.status = determineStatus(directusScooter);
  
  // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
  Object.keys(directusScooter).forEach(key => {
    if (directusScooter[key] === null || directusScooter[key] === undefined) {
      delete directusScooter[key];
    }
  });
  
  return directusScooter;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫—É—Ç–µ—Ä–∞
function validateScooter(scooter, index) {
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π - –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
  if (!scooter.scooter_number_old) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞');
  }

  // Model –∏ year –¥–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∫—É—Ç–µ—Ä—ã
  // if (!scooter.model) {
  //   errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—å');
  // }

  // if (!scooter.year) {
  //   errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞');
  // }

  return {
    valid: errors.length === 0,
    errors,
    scooter,
    index
  };
}

// –ò–º–ø–æ—Ä—Ç —Å–∫—É—Ç–µ—Ä–∞ –≤ Directus
async function importScooter(scooter, index) {
  try {
    const response = await axios.post(
      `${DIRECTUS_URL}/items/scooters`,
      scooter,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );

    return {
      success: true,
      index,
      scooter_number: scooter.scooter_number_old,
      id: response.data.data.id
    };
  } catch (error) {
    return {
      success: false,
      index,
      scooter_number: scooter.scooter_number_old,
      error: error.response?.data?.errors || error.message
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∫—É—Ç–µ—Ä–æ–≤ –∏–∑ Directus
async function getCurrentScooters() {
  try {
    const response = await axios.get(
      `${DIRECTUS_URL}/items/scooters?limit=-1`,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    return response.data.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–∫—É—Ç–µ—Ä–æ–≤:', error.message);
    return [];
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrate() {
  console.log('üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–•\n');
  console.log('=' .repeat(60) + '\n');

  try {
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    await authenticate();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ scooters-data.json...');
    const scootersData = JSON.parse(fs.readFileSync('scooters-data.json', 'utf8'));
    console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${scootersData.length}\n`);

    // –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å - analyze-google-sheets.js —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const actualScooters = scootersData;
    console.log(`üìä –°–∫—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${actualScooters.length}\n`);

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const transformedScooters = actualScooters.map(transformScooter);
    console.log(`‚úì –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${transformedScooters.length}\n`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const validationResults = transformedScooters.map((s, i) => validateScooter(s, i));
    const validScooters = validationResults.filter(r => r.valid);
    const invalidScooters = validationResults.filter(r => !r.valid);

    console.log(`‚úì –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${validScooters.length}`);
    console.log(`‚úó –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${invalidScooters.length}\n`);

    if (invalidScooters.length > 0) {
      console.log('‚ö†Ô∏è  –ù–ï–í–ê–õ–ò–î–ù–´–ï –ó–ê–ü–ò–°–ò:\n');
      invalidScooters.forEach(result => {
        console.log(`  –ó–∞–ø–∏—Å—å ${result.index + 1}:`);
        result.errors.forEach(err => console.log(`    - ${err}`));
        console.log('');
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫—É—Ç–µ—Ä—ã
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—É—Ç–µ—Ä–æ–≤ –≤ Directus...');
    const currentScooters = await getCurrentScooters();
    console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—É—Ç–µ—Ä–æ–≤: ${currentScooters.length}\n`);

    // –ò–º–ø–æ—Ä—Ç
    console.log('üì• –ù–ê–ß–ê–õ–û –ò–ú–ü–û–†–¢–ê\n');
    console.log('-'.repeat(60) + '\n');

    const importResults = {
      success: [],
      failed: [],
      skipped: []
    };

    for (let i = 0; i < validScooters.length; i++) {
      const validation = validScooters[i];
      const scooter = validation.scooter;
      const index = validation.index;

      console.log(`[${i + 1}/${validScooters.length}] –ò–º–ø–æ—Ä—Ç —Å–∫—É—Ç–µ—Ä–∞: ${scooter.scooter_number_old || 'N/A'}`);

      const result = await importScooter(scooter, index);

      if (result.success) {
        console.log(`  ‚úì –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (ID: ${result.id})`);
        importResults.success.push(result);
      } else {
        console.log(`  ‚úó –û—à–∏–±–∫–∞: ${JSON.stringify(result.error)}`);
        importResults.failed.push(result);
      }

      console.log('');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const report = {
      timestamp: new Date().toISOString(),
      source: {
        total: scootersData.length,
        actual: actualScooters.length
      },
      validation: {
        valid: validScooters.length,
        invalid: invalidScooters.length,
        invalidRecords: invalidScooters
      },
      import: {
        success: importResults.success.length,
        failed: importResults.failed.length,
        successRecords: importResults.success,
        failedRecords: importResults.failed
      },
      directus: {
        beforeImport: currentScooters.length,
        afterImport: currentScooters.length + importResults.success.length
      }
    };

    fs.writeFileSync('migration-report.json', JSON.stringify(report, null, 2), 'utf8');

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ò–ì–†–ê–¶–ò–ò');
    console.log('='.repeat(60) + '\n');
    console.log(`–ò—Å—Ç–æ—á–Ω–∏–∫ (Google Sheets):`);
    console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${scootersData.length}`);
    console.log(`  –°–∫—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${actualScooters.length}\n`);
    console.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è:`);
    console.log(`  ‚úì –í–∞–ª–∏–¥–Ω—ã—Ö: ${validScooters.length}`);
    console.log(`  ‚úó –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidScooters.length}\n`);
    console.log(`–ò–º–ø–æ—Ä—Ç:`);
    console.log(`  ‚úì –£—Å–ø–µ—à–Ω–æ: ${importResults.success.length}`);
    console.log(`  ‚úó –û—à–∏–±–æ–∫: ${importResults.failed.length}\n`);
    console.log(`Directus:`);
    console.log(`  –î–æ –∏–º–ø–æ—Ä—Ç–∞: ${currentScooters.length}`);
    console.log(`  –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: ${currentScooters.length + importResults.success.length}\n`);
    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ migration-report.json\n`);

    return report;

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrate().catch(console.error);

