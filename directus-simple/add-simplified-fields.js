const axios = require('axios');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

async function authenticate() {
  const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
    email: EMAIL,
    password: PASSWORD
  });
  authToken = response.data.data.access_token;
  console.log('‚úì Authenticated\n');
  return authToken;
}

async function createField(collection, fieldData) {
  try {
    await axios.post(
      `${DIRECTUS_URL}/fields/${collection}`,
      fieldData,
      {
        headers: { Authorization: `Bearer ${authToken}` }
      }
    );
    console.log(`  ‚úì Created field: ${fieldData.field}`);
  } catch (error) {
    if (error.response?.data?.errors?.[0]?.extensions?.code === 'RECORD_NOT_UNIQUE') {
      console.log(`  ‚ö† Field ${fieldData.field} already exists, updating...`);
      try {
        await axios.patch(
          `${DIRECTUS_URL}/fields/${collection}/${fieldData.field}`,
          fieldData,
          {
            headers: { Authorization: `Bearer ${authToken}` }
          }
        );
        console.log(`  ‚úì Updated field: ${fieldData.field}`);
      } catch (updateError) {
        console.error(`  ‚úó Error updating ${fieldData.field}:`, updateError.response?.data?.errors?.[0]?.message);
      }
    } else {
      console.error(`  ‚úó Error creating ${fieldData.field}:`, error.response?.data?.errors?.[0]?.message || error.message);
    }
  }
}

async function addSimplifiedFields() {
  console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...\n');
  await authenticate();
  
  console.log('üìä Scooters - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã...\n');
  
  // –°—Ç–∞—Ç—É—Å —Å–∫—É—Ç–µ—Ä–∞ (—Å–≤–æ–±–æ–¥–µ–Ω/–≤ –∞—Ä–µ–Ω–¥–µ/—Ä–µ–º–æ–Ω—Ç)
  await createField('scooters', {
    field: 'current_status',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      options: {
        choices: [
          { text: 'üü¢ –°–≤–æ–±–æ–¥–µ–Ω', value: 'available' },
          { text: 'üîµ –í –∞—Ä–µ–Ω–¥–µ', value: 'rented' },
          { text: 'üî¥ –†–µ–º–æ–Ω—Ç', value: 'maintenance' },
          { text: '‚ö´ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω', value: 'inactive' }
        ]
      },
      display: 'labels',
      display_options: {
        choices: [
          { text: 'üü¢ –°–≤–æ–±–æ–¥–µ–Ω', value: 'available', foreground: '#FFFFFF', background: '#10B981' },
          { text: 'üîµ –í –∞—Ä–µ–Ω–¥–µ', value: 'rented', foreground: '#FFFFFF', background: '#3B82F6' },
          { text: 'üî¥ –†–µ–º–æ–Ω—Ç', value: 'maintenance', foreground: '#FFFFFF', background: '#EF4444' },
          { text: '‚ö´ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω', value: 'inactive', foreground: '#FFFFFF', background: '#6B7280' }
        ]
      },
      width: 'half',
      note: '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∫—É—Ç–µ—Ä–∞',
      sort: 3
    },
    schema: {
      default_value: 'available'
    }
  });
  
  // –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞/–∫–ª–∏–µ–Ω—Ç–∞
  await createField('scooters', {
    field: 'current_owner_name',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: '–ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)',
      sort: 10
    }
  });
  
  // Telegram ID –∫–ª–∏–µ–Ω—Ç–∞
  await createField('scooters', {
    field: 'current_owner_telegram',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: 'Telegram ID –∏–ª–∏ username –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ 123456789)',
      sort: 11
    }
  });
  
  // –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
  await createField('scooters', {
    field: 'current_owner_phone',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
      sort: 12
    }
  });
  
  console.log('\nüìä Clients - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ telegram_id...\n');
  
  // Telegram ID –≤ clients
  await createField('clients', {
    field: 'telegram_id',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: 'Telegram ID –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ 123456789)',
      sort: 7
    }
  });
  
  // Telegram username –≤ clients
  await createField('clients', {
    field: 'telegram_username',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: 'Telegram username –±–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ivanov)',
      sort: 8
    }
  });
  
  console.log('\n‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
  console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
  console.log('   Scooters:');
  console.log('   ‚úì current_status - –°—Ç–∞—Ç—É—Å (—Å–≤–æ–±–æ–¥–µ–Ω/–≤ –∞—Ä–µ–Ω–¥–µ/—Ä–µ–º–æ–Ω—Ç/–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)');
  console.log('   ‚úì current_owner_name - –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('   ‚úì current_owner_telegram - Telegram –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('   ‚úì current_owner_phone - –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('   Clients:');
  console.log('   ‚úì telegram_id - Telegram ID');
  console.log('   ‚úì telegram_username - Telegram username');
  console.log('\nüí° –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)');
}

addSimplifiedFields().catch(console.error);

