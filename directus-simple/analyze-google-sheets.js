const fs = require('fs');
const axios = require('axios');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –∏–∑ Google Sheets
async function downloadCSV() {
  const url = 'https://docs.google.com/spreadsheets/d/1HyF7QIqmHNGFl8IFnhTgV7QLAhBO03pv2zLGTjQJzzk/export?format=csv&gid=214317830';
  
  console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...\n');
  
  const response = await axios.get(url);
  const csvData = response.data;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  fs.writeFileSync('google-sheets-data.csv', csvData, 'utf8');
  console.log('‚úì CSV –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ google-sheets-data.csv\n');
  
  return csvData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV
function analyzeCSV(csvData) {
  const lines = csvData.split('\n');
  
  console.log('üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ GOOGLE SHEETS:\n');
  console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: ${lines.length}\n`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  console.log('–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ CSV:\n');
  for (let i = 0; i < Math.min(10, lines.length); i++) {
    const cells = lines[i].split(',');
    console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${cells.length} –∫–æ–ª–æ–Ω–æ–∫`);
    if (i < 3) {
      console.log(`  –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: ${cells.slice(0, 5).join(' | ')}`);
    }
  }
  
  // –ü–∞—Ä—Å–∏–º CSV –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
  const rows = [];
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].trim()) {
      rows.push(lines[i].split(','));
    }
  }
  
  console.log(`\nüìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}\n`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  // –í —ç—Ç–æ–º CSV –æ—Å–æ–±–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ –ø–∞—Ä–∞–º –∫–æ–ª–æ–Ω–æ–∫
  console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:\n');
  
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å "Power" - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
  let powerRowIndex = -1;
  for (let i = 0; i < rows.length; i++) {
    if (rows[i][0] === 'Power') {
      powerRowIndex = i;
      break;
    }
  }
  
  if (powerRowIndex === -1) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å "Power"');
    return;
  }
  
  console.log(`‚úì –°—Ç—Ä–æ–∫–∞ —Å "Power" –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${powerRowIndex + 1}\n`);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—É—Ç–µ—Ä–æ–≤ (–ø–∞—Ä –∫–æ–ª–æ–Ω–æ–∫)
  const powerRow = rows[powerRowIndex];
  let scooterCount = 0;
  for (let i = 0; i < powerRow.length; i++) {
    if (powerRow[i] && powerRow[i].trim()) {
      scooterCount++;
    }
  }
  
  console.log(`üõµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—É—Ç–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${scooterCount}\n`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
  console.log('üìù –ü–û–õ–Ø –í GOOGLE SHEETS:\n');
  const fieldNames = [];
  for (let i = powerRowIndex; i < Math.min(powerRowIndex + 50, rows.length); i++) {
    const fieldName = rows[i][0];
    if (fieldName && fieldName.trim() && !fieldName.startsWith('b')) {
      fieldNames.push(fieldName);
      console.log(`  - ${fieldName}`);
    }
  }
  
  console.log(`\n–í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${fieldNames.length}\n`);
  
  return {
    totalRows: rows.length,
    scooterCount,
    fieldNames,
    powerRowIndex,
    rows
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫—É—Ç–µ—Ä–æ–≤
function extractScooters(analysisResult) {
  const { rows, powerRowIndex, scooterCount } = analysisResult;

  console.log('\nüîÑ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–ö–£–¢–ï–†–û–í:\n');

  const scooters = [];
  const powerRow = rows[powerRowIndex];

  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫—É—Ç–µ—Ä–æ–≤
  let scooterNumberRowIndex = -1;
  for (let i = 0; i < rows.length; i++) {
    const firstCell = rows[i][0];
    if (firstCell && (firstCell.includes('–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞') || firstCell === '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)' || firstCell === '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  ')) {
      scooterNumberRowIndex = i;
      break;
    }
  }

  console.log(`–°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫—É—Ç–µ—Ä–æ–≤: ${scooterNumberRowIndex}\n`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—É—Ç–µ—Ä–∞
  // –ò—â–µ–º –í–°–ï –∫–æ–ª–æ–Ω–∫–∏ –≥–¥–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞ (–Ω–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
  const scooterColumns = [];
  const scooterNumberRow = rows[scooterNumberRowIndex];

  for (let i = 1; i < scooterNumberRow.length; i++) {
    const value = scooterNumberRow[i];
    // –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞ (–Ω–µ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è)
    if (value && value.trim() &&
        value !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)' &&
        value !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  ' &&
        value !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞') {
      scooterColumns.push(i);
    }
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ —Å–∫—É—Ç–µ—Ä–∞–º–∏: ${scooterColumns.length}\n`);
  console.log('–ü–µ—Ä–≤—ã–µ 10 –Ω–æ–º–µ—Ä–æ–≤:', scooterColumns.slice(0, 10).map(i => scooterNumberRow[i]).join(', '));

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—É—Ç–µ—Ä–∞
  for (let colIndex of scooterColumns) {
    const scooter = {};

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for (let rowIndex = powerRowIndex; rowIndex < rows.length; rowIndex++) {
      const fieldName = rows[rowIndex][0];
      const value = rows[rowIndex][colIndex];

      if (fieldName && fieldName.trim() && !fieldName.startsWith('b')) {
        scooter[fieldName] = value || '';
      }
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –≥–¥–µ –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞ = "–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞" (—ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    const scooterNumber = scooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || scooter['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '];
    if (scooterNumber &&
        scooterNumber.trim() &&
        scooterNumber !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)' &&
        scooterNumber !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  ' &&
        scooterNumber !== '–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞') {
      scooters.push(scooter);
    }
  }

  console.log(`‚úì –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∫—É—Ç–µ—Ä–æ–≤: ${scooters.length}\n`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–∫—É—Ç–µ—Ä–∞
  if (scooters.length > 0) {
    console.log('üìÑ –ü–†–ò–ú–ï–† –ü–ï–†–í–û–ì–û –°–ö–£–¢–ï–†–ê:\n');
    const firstScooter = scooters[0];
    for (let key in firstScooter) {
      if (firstScooter[key]) {
        console.log(`  ${key}: ${firstScooter[key]}`);
      }
    }
  }

  // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Å–∫—É—Ç–µ—Ä–æ–≤
  console.log('\nüìã –í–°–ï –ù–û–ú–ï–†–ê –°–ö–£–¢–ï–†–û–í:\n');
  scooters.forEach((s, i) => {
    const number = s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '];
    console.log(`${i + 1}. ${number}`);
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
  fs.writeFileSync('scooters-data.json', JSON.stringify(scooters, null, 2), 'utf8');
  console.log('\n‚úì –î–∞–Ω–Ω—ã–µ —Å–∫—É—Ç–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scooters-data.json\n');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
  const logData = {
    totalScooters: scooters.length,
    numbers: scooters.map(s => s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  (—Å—Ç–∞—Ä—ã–π)'] || s['–Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞  '])
  };
  fs.writeFileSync('analysis-log.json', JSON.stringify(logData, null, 2), 'utf8');

  return scooters;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const csvData = await downloadCSV();
    const analysisResult = analyzeCSV(csvData);
    const scooters = extractScooters(analysisResult);
    
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!\n');
    console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∫—É—Ç–µ—Ä–æ–≤: ${scooters.length}\n`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }
}

main();

