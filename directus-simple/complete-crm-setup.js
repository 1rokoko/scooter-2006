const axios = require('axios');

const DIRECTUS_URL = 'http://localhost:8055';
const EMAIL = 'seocos@gmail.com';
const PASSWORD = 'directus2024!';

let authToken = '';

// Authenticate
async function authenticate() {
  try {
    const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: EMAIL,
      password: PASSWORD
    });
    authToken = response.data.data.access_token;
    console.log('‚úÖ Authenticated successfully\n');
    return true;
  } catch (error) {
    console.error('‚ùå Authentication failed:', error.response?.data || error.message);
    return false;
  }
}

// Create or update field
async function createOrUpdateField(collection, fieldData) {
  try {
    await axios.patch(
      `${DIRECTUS_URL}/fields/${collection}/${fieldData.field}`,
      fieldData,
      { headers: { Authorization: `Bearer ${authToken}` } }
    );
    console.log(`‚úÖ Updated field: ${collection}.${fieldData.field}`);
  } catch (error) {
    if (error.response?.status === 404) {
      try {
        await axios.post(
          `${DIRECTUS_URL}/fields/${collection}`,
          fieldData,
          { headers: { Authorization: `Bearer ${authToken}` } }
        );
        console.log(`‚úÖ Created field: ${collection}.${fieldData.field}`);
      } catch (createError) {
        console.error(`‚ùå Error creating field ${collection}.${fieldData.field}:`, createError.response?.data || createError.message);
      }
    } else {
      console.error(`‚ùå Error updating field ${collection}.${fieldData.field}:`, error.response?.data || error.message);
    }
  }
}

// Main execution
async function main() {
  console.log('üöÄ Completing CRM setup...\n');

  if (!await authenticate()) {
    return;
  }

  // Add CRM fields to leads collection
  console.log('üìù Adding CRM fields to leads collection...\n');

  await createOrUpdateField('leads', {
    field: 'name',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: '–ò–º—è –ª–∏–¥–∞',
      required: false
    },
    schema: {}
  });

  await createOrUpdateField('leads', {
    field: 'client_phone',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)',
      required: false,
      options: {
        placeholder: '+66 XX XXX XXXX'
      }
    },
    schema: {}
  });

  await createOrUpdateField('leads', {
    field: 'telegram_account',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: 'Telegram –∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)',
      required: false,
      options: {
        placeholder: '@username'
      }
    },
    schema: {}
  });

  await createOrUpdateField('leads', {
    field: 'email',
    type: 'string',
    meta: {
      interface: 'input',
      width: 'half',
      note: 'Email –∞–¥—Ä–µ—Å',
      required: false,
      options: {
        placeholder: 'email@example.com'
      }
    },
    schema: {}
  });

  await createOrUpdateField('leads', {
    field: 'all_conversation',
    type: 'text',
    meta: {
      interface: 'input-rich-text-md',
      width: 'full',
      note: '–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —Å –ª–∏–¥–æ–º',
      required: false
    },
    schema: {}
  });

  await createOrUpdateField('leads', {
    field: 'status',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      width: 'half',
      note: '–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞',
      required: false,
      options: {
        choices: [
          { text: '–ù–æ–≤—ã–π', value: '–Ω–æ–≤—ã–π' },
          { text: '–í —Ä–∞–±–æ—Ç–µ', value: '–≤_—Ä–∞–±–æ—Ç–µ' },
          { text: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', value: '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω' },
          { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω', value: '–æ—Ç–∫–ª–æ–Ω–µ–Ω' }
        ]
      }
    },
    schema: {
      default_value: '–Ω–æ–≤—ã–π'
    }
  });

  await createOrUpdateField('leads', {
    field: 'notes',
    type: 'text',
    meta: {
      interface: 'input-rich-text-md',
      width: 'full',
      note: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ –ª–∏–¥–µ',
      required: false
    },
    schema: {}
  });

  // Update status field in clients collection
  console.log('\nüìù Updating status field in clients collection...\n');

  await createOrUpdateField('clients', {
    field: 'status',
    type: 'string',
    meta: {
      interface: 'select-dropdown',
      width: 'half',
      note: '–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞',
      required: false,
      options: {
        choices: [
          { text: '–ê–∫—Ç–∏–≤–Ω—ã–π', value: '–∞–∫—Ç–∏–≤–Ω—ã–π' },
          { text: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π', value: '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π' },
          { text: 'VIP', value: 'vip' }
        ]
      }
    },
    schema: {
      default_value: '–∞–∫—Ç–∏–≤–Ω—ã–π'
    }
  });

  // Add converted_from_lead_id field to clients
  console.log('\nüìù Adding conversion tracking field to clients...\n');

  await createOrUpdateField('clients', {
    field: 'converted_from_lead_id',
    type: 'integer',
    meta: {
      interface: 'select-dropdown-m2o',
      width: 'half',
      note: '–õ–∏–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç',
      required: false,
      display: 'related-values',
      display_options: {
        template: '{{name}} ({{telegram_account}} / {{client_phone}})'
      }
    },
    schema: {
      foreign_key_table: 'leads',
      foreign_key_column: 'id'
    }
  });

  // Add client_id field to scooters
  console.log('\nüìù Adding client relationship to scooters...\n');

  await createOrUpdateField('scooters', {
    field: 'client_id',
    type: 'integer',
    meta: {
      interface: 'select-dropdown-m2o',
      width: 'half',
      note: '–ö–ª–∏–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º —Å–∫—É—Ç–µ—Ä–æ–º',
      required: false,
      display: 'related-values',
      display_options: {
        template: '{{name}} ({{client_phone}})'
      }
    },
    schema: {
      foreign_key_table: 'clients',
      foreign_key_column: 'id'
    }
  });

  console.log('\n‚úÖ CRM setup completed successfully!');
  console.log('\nüìã Summary:');
  console.log('  ‚úÖ Added CRM fields to leads collection');
  console.log('  ‚úÖ Updated status fields with proper choices');
  console.log('  ‚úÖ Added conversion tracking (clients.converted_from_lead_id)');
  console.log('  ‚úÖ Added client relationship to scooters (scooters.client_id)');
  console.log('\nPlease restart Directus to see all changes.');
}

main().catch(console.error);

