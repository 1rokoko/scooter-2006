const { execSync } = require('child_process');
const fs = require('fs');

const log = [];

function logMessage(msg) {
  console.log(msg);
  log.push(msg);
}

try {
  logMessage('\n' + '='.repeat(70));
  logMessage('üöÄ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô');
  logMessage('='.repeat(70) + '\n');
  
  // –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
  logMessage('–®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã...');
  execSync('node clear-scooters.js', { stdio: 'inherit' });
  logMessage('‚úì –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  
  // –®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è
  logMessage('–®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
  execSync('node migrate-scooters.js', { stdio: 'inherit' });
  logMessage('‚úì –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  
  // –®–∞–≥ 3: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  logMessage('–®–∞–≥ 3: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è...');
  execSync('node verify-migration.js', { stdio: 'inherit' });
  logMessage('‚úì –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  
  logMessage('='.repeat(70));
  logMessage('‚úÖ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  logMessage('='.repeat(70) + '\n');
  
} catch (error) {
  logMessage(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
fs.writeFileSync('migration-log.txt', log.join('\n'), 'utf8');
logMessage('üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ migration-log.txt');

